// understand add method
// write size method

import java.util.Random;
class BinaryTree {
    private static Random random = new Random();
    private class Node {
        private Object value;
        private Node right;
        private Node left;
        Node(Object setValue) {
            value = setValue;
        }
    }
    private Node root;
    BinaryTree(Object[] values) {
//            int count = 0;
        for (Object value : values) {
//            count++;
            add(root, value);
//            System.out.println(value);
        }
    }
    public void add(Object value) {
        add(root, value);
    }
    private void add(Node current, Object value) {
        if (current == null) {
            root = new Node(value);
            return;
        }
        if (random.nextBoolean()) {
            if (current.right == null) {
                current.right = new Node(value);
            }
            else {
                add(current.right, value);
            }
        }
        else {
            if (current.left == null) {
                current.left = new Node(value);
            } 
            else {
                add(current.left, value);
            }
        }
    }
    public int size() {
        return size(root);
    }
    private int size(Node current) {
//        System.out.println("Counting tree rooted at " + current.value);
        if (current.right == null & current.left == null) {
//            System.out.println("Reached a leaf with value " + current.value);
            return 1;
        }
        int count = 1;
        if (current.right != null) {
            count += size(current.right);
        }
        if (current.left != null) {
            count += size(current.left);
        }
        return count;
        
    }
    public String toString() {
        return toString(root);
    }
    private String toString(Node current) {
        if (current == null) {
            return "";
        }
        return "[" + current.value.toString() + "]"
        + toString(current.right) + toString(current.left);
    }
}

public class Main {
    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree(new Integer[] {1, 2, 5, 8, 9, 10});
    System.out.println(tree.size());
    System.out.println(tree);
    }
}
